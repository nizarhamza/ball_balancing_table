import cv2
import numpy as np
import requests 
import time 

# Configuration ThingSpeak
THINGSPEAK_API_KEY = "0KWO3BVQYPX2JQQZ"
THINGSPEAK_CHANNEL_ID = " 2510041"
THINGSPEAK_URL_BASE = " https://api.thingspeak.com/update"
HEADERS = {'Content-Type': 'application/x-www-form-urlencoded'}

# Délai entre les envois de données à ThingSpeak (en secondes)
SEND_DELAY = 5  #envoi des donnee chaque 5seconde
last_send_time = 0


# Fonction pour envoyer les données à ThingSpeak
def send_to_thingspeak(x, y):
    global last_send_time
    current_time = time.time()
  
    if current_time - last_send_time < SEND_DELAY:
        return  

    THINGSPEAK_URL = f"{THINGSPEAK_URL_BASE}?api_key={THINGSPEAK_API_KEY}&field1={x}&field2={y}"
    
    response = requests.post(THINGSPEAK_URL, headers=HEADERS)
    
   
    
    if response.status_code == 200:  # ok 
        print(f"Data sent to ThingSpeak: x={x}, y={y}")
        last_send_time = current_time
    else:
        print("Failed to send data to ThingSpeak")




# Fonction pour détecter le ballon et renvoyer ses coordonnées
def detect_ball(frame):
     # Réduire la taille de l'image
    small_frame = cv2.resize(frame, (0, 0), fx=0.5, fy=0.5)

    # Convertir l'image en niveaux de gris
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Appliquer un flou gaussien pour réduire le bruit
    blurred = cv2.GaussianBlur(gray, (11, 11), 0)
    
    # Détecter les cercles dans l'image
    circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT, dp=1, minDist=50,
                               param1=100, param2=30, minRadius=10, maxRadius=50)
    
    if circles is not None:
        # Convertir les coordonnées (x, y) et le rayon en entiers
        circles = np.round(circles[0, :]).astype("int")
        
        # Renvoyer les coordonnées du centre du cercle (nous ne prenons que le premier cercle détecté)
        return circles[0][:2]
    
    return None

# Lire la vidéo (ou utiliser la webcam cam par defaut 0)
video = cv2.VideoCapture(0)

# Initialiser la position précédente du ballon
prev_position = None

while True:
    # Lire le prochain frame de webcam
    ret, frame = video.read()
    if not ret:
        break
    
    # Détecter la position actuelle du ballon
    position = detect_ball(frame)
    
    if position is not None:
        # Envoyer les coordonnées à ThingSpeak
        x, y = position
        send_to_thingspeak(x, y)

        # Si le ballon est détecté, mettre à jour la position précédente
        prev_position = position
        # Dessiner un cercle sur le frame au centre du ballon
        cv2.circle(frame, tuple(position), 5, (0, 255, 0), -1)
        # Afficher les coordonnées du ballon
        x, y = position
        cv2.putText(frame, f"({x}, {y})", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
    
    # Afficher le frame
    cv2.imshow("Frame", frame)
    
    # Quitter si la touche 'q' est pressée
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libérer la vidéo et détruire toutes les fenêtres ouvertes
video.release()
cv2.destroyAllWindows()
